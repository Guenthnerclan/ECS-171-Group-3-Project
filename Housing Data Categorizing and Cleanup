#
import numpy as np
from matplotlib import pyplot as plt
import pandas as pd
import seaborn as sns

train_df = pd.read_csv("train.csv")
test_df = pd.read_csv("test.csv")



train_df.info()
#1460 x 81
#Last column contains the sale price to be predicted in test set



corrmat = train_df.corr()
f, ax = plt.subplots(figsize=(12, 9))
sns.heatmap(corrmat, vmax=.8, square=True);



#Find out which paramters appear to have an appreciable linear relationship with SalePrice
print("List of parameters that have a good linear model fit to Sale Price")
for i in range(len(corrmat["SalePrice"])-1):
    #Likely to be a linear relationship
    if((corrmat["SalePrice"][i] > 0.5 or corrmat["SalePrice"][i] < -0.5)):
        print(corrmat.columns[i], corrmat["SalePrice"][i])
        
        
        
        #We are going to want data parameters to have a significant amount of data for proper training
#Thus, Alley, PoolQC, Fence, MiscFeature all should be removed for low values
#FireplaceQu also only has half total data, possible need for removal as well
##ID column merely shows the row number of each sample
#Has no relationship with sale price so can also remove
train_df = train_df.drop(["Id","Alley","PoolQC","Fence","MiscFeature"],axis=1)



#NA values in number valued columns can be replaced by 0 to retain only numbers
for i in train_df.columns:
    if (train_df[i].dtype == 'int64' or train_df[i].dtype == 'float64'):
        train_df[i] = train_df[i].fillna(train_df[i].mode()[0])
        
        
        
##Plots all numerical variables vs SalePrice
#Useful to check the linearity of the variables
#Also plots for discrete numerical variables, but still kinda helpful for those
filepath = 'C:/yourlocation'
fig = plt.figure(figsize=(30,20),dpi = 100)
plt.rcParams['figure.figsize'] = [15, 10]
for i in range(0,len(train_df)):
    if(train_df[train_df.columns[i]].dtype == ('int64' or 'float64')):
        plt.plot(train_df[train_df.columns[i]],train_df["SalePrice"], "b.",label = train_df.columns[i])
        plt.legend()
        plt.savefig(filepath+train_df.columns[i]+"vs SalePrice")
        plt.ylabel("SalePrice")
        plt.xlabel(train_df.columns[i])
        plt.clf()
